/*
 * Copyright 2015 Austin Lehman
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/***********************************************************************
 * jstests.ca
 * 
 * Purpose:
 * These classes provide support for unit testing in the browser.
 * jstest is the actual unit test class and test class provides helper 
 * methods for expected results.
 **********************************************************************/

class jstest
{
	public item = '';					// the item the test belongs to
	public test = '';					// test string description
	public result = false;				// true for passing and false for failure
	public error = '';					// if test failed and there was an exception, the 
										// exception string is stored here
	
	public testCb = null;				// the callback method to call for the test
	
	public jstest(string Item, string Test, callback TestCb)
	{
		this.item = Item;
		this.test = Test;
		this.testCb = TestCb;
	}
	
	public run()
	{
		try
		{
			if(this.testCb)
			{
				this.result = lang.call(this.testCb);
				if(!(this.result instanceof 'bool'))
				{
					this.error = "Expecting test result to be of type 'bool' but found '" + lang.type(this.result) + "' instead.";
					this.result = false;
				}
			}
			else { throw "jstest.run(): Test callback method is null."; }
		}
		catch(e)
		{
			if(string.contains(string.toLower(e.getMessage()), 'not implemented'))
			{
				this.result = true;
				this.error = 'Not Implemented';
			}
			else
			{
				this.result = false;
				this.error = e.getStackTrace();
				console.err(e.getStackTrace());
			}
		}
		
		return this.result;
	}
}

static class test
{
	public expect(Val1, Val2) { if(Val1 == Val2) { return true; } return false; }
	public expectNull(Val) { if(Val instanceof 'null') { return true; } return false; }
	public expectBool(Val) { if(Val instanceof 'bool') { return true; } return false; }
	public expectInt(Val) { if(Val instanceof 'int') { return true; } return false; }
	public expectDouble(Val) { if(Val instanceof 'double') { return true; } return false; }
	public expectString(Val) { if(Val instanceof 'string') { return true; } return false; }
	public expectMap(Val) { if(Val instanceof 'map') { return true; } return false; }
	public expectList(Val) { if(Val instanceof 'list') { return true; } return false; }
	public expectObject(Val, string ObjType) { if(Val instanceof ObjType) { return true; } return false; }
}
